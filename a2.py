def decode_varint(data, index):
    """Decode a varint from the given byte array starting at index."""
    result = 0
    shift = 0
    while True:
        byte = data[index]
        result |= (byte & 0x7F) << shift
        index += 1
        if byte & 0x80 == 0:
            break
    return result, index

def extract_data_start(packet_bytes):
    index = 0
    fields = []

    while index < len(packet_bytes):
        field_key, index = decode_varint(packet_bytes, index)
        field_number = field_key >> 3  # Extrair o n√∫mero do campo
        wire_type = field_key & 0x07  # Extrair o tipo de wire

        if wire_type == 0:  # Varint
            value, index = decode_varint(packet_bytes, index)
            fields.append((field_number, value))
        elif wire_type == 1:  # Fixed64
            value = int.from_bytes(packet_bytes[index:index + 8], 'little')
            index += 8
            fields.append((field_number, value))
        elif wire_type == 2:  # Length-delimited
            length, index = decode_varint(packet_bytes, index)
            value = packet_bytes[index:index + length]
            index += length
            fields.append((field_number, value))
        elif wire_type == 5:  # Fixed32
            value = int.from_bytes(packet_bytes[index:index + 4], 'little')
            index += 4
            fields.append((field_number, value))

    return fields

if __name__ == "__main__":
    # Exemplo de uso
    packet = b'\xc6\x07\x1a\xc3\x07\n\xc0\x07\n^type.ankama.com/com.ankama.dofus.server.game.protocol.gamemap.MapComplementaryInformationEvent\x12\xdd\x06\x08\xe5\x03\x10\x93\x96\x80*"l\x08\x87\x87\xf8\x80\xbc\x02\x12\x03\x10\x96\x03\x1a^\n,\x08\x01\x12\nZ\xdc\x10\xff\x04\xf7\x01h\xce\x03\x1a\x18\xc7\xa6\xad\x0b\x80\xc4\xc5\x14\xc2\xd6\xf6\x1e\x80\xfe\xf4"\xb2\x82\x9a-\x8f\xaa\xea7"\x02\xa0\x01\x12.",\n\nChupa-Cano\x12\x1e\n\x01\x0b\x1a\x02X\x01 \xa4\x86\x85N*\x10\x08\x02 \xbe\x87\xf8\x80\xbc\x02(\xbe\x87\xf8\x80\xbc\x02"C\x08\xe0\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x04\x104\x18\x05\x1a0\n\x06\x08\xb1\x04"\x01_\x12&2$\n\x15\n\x06\x084\x10\x03\x18\x12\x12\x0b\x08;\x10\x05\x18\x14"\x03\x08\xb2\x04\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x18\x01"e\x08\xdf\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\x92\x01\x18\x01\x1aQ\n\x07\x08\xb9\x04"\x02\x82\x01\x12F2D\n5\n\x06\x08=\x10\x03\x18\x12\x12\x0e\x084\x10\x04\x18\x13"\x06\x08\xb1\x04"\x01_\x12\x0b\x08;\x10\x03\x18\x12"\x03\x08\xb2\x04\x12\x0e\x084\x10\x04\x18\x13"\x06\x08\xb1\x04"\x01_\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x18\x01"w\x08\xde\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xa3\x01\x18\x03\x1ac\n\x06\x08\xb1\x04"\x01_\x12Y2W\nH\n\x06\x084\x10\x03\x18\x12\x12\x0e\x084\x10\x01\x18\x10"\x06\x08\xb1\x04"\x01_\x12\x0f\x08=\x10\x05\x18\x14"\x07\x08\xb9\x04"\x02\x82\x01\x12\x0f\x08=\x10\x03\x18\x12"\x07\x08\xb9\x04"\x02\x82\x01\x12\x0c\x08\xd3%\x10\x02\x18\x11"\x03\x08\xd6\x02\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x18\x01*\x12\x08\x9c\xc6\x1e\x10\x01\x1a\x06\x08\x06\x10\xf1\xa3\x01(\x010\x16*\x12\x08\x9b\xc6\x1e\x10\x01\x1a\x06\x08\x06\x10\xf0\xa3\x01(\x010\x16*\x10\x08\xa8\xf3\x1d\x10\xfe\x01\x1a\x05\x08D\x10\xafZ0\x06*\x10\x08\xaa\xf3\x1d\x10\xff\x01\x1a\x05\x08E\x10\xb1Z0\x15*\x0f\x08\xb4\xcd\x1c\x10*"\x05\x082\x10\xb5Z0u*\x0f\x08\xb6\xcd\x1c\x10*"\x05\x082\x10\xb8Z0u*\x0f\x08\xb7\xcd\x1c\x10*"\x05\x082\x10\xb9Z0u*\x0f\x08\xb9\xcd\x1c\x10*"\x05\x082\x10\xbbZ0u*\x0f\x08\xba\xcd\x1c\x10*"\x05\x082\x10\xbcZ0u*\x0f\x08\xbd\xcd\x1c\x10*"\x05\x082\x10\xbfZ0u*\x0f\x08\xbe\xcd\x1c\x10*"\x05\x082\x10\xc0Z0u*\x10\x08\xac\xf3\x1d\x10\xfe\x01\x1a\x05\x08D\x10\xc4Z0\x06*\x0f\x08\xc2\xcd\x1c\x10*"\x05\x082\x10\xc5Z0u*\x10\x08\x99\xc6\x1e\x10!"\x06\x08\'\x10\xdd\xa3\x010\x12*\x0f\x08\xcb\xf4\x1c\x10\xac\x02\x1a\x06\x08T\x10\xf5\xd2\x02*\x10\x08\xd0\xe8\x1c\x10&\x1a\x06\x08-\x10\x95\x8b\x0105*\x10\x08\xb0\xc6\x1e\x10\x01\x1a\x06\x08\x06\x10\x96\x8b\x010\x122\t\x08\x9c\xc6\x1e\x10\xda\x03 \x012\t\x08\x9b\xc6\x1e\x10\xc8\x02 \x012\x06\x08\xa8\xf3\x1d\x10c2\x07\x08\xaa\xf3\x1d\x10\xd2\x012\x07\x08\xb4\xcd\x1c\x10\xe2\x022\x07\x08\xb6\xcd\x1c\x10\xfd\x022\x07\x08\xb7\xcd\x1c\x10\xfe\x022\x07\x08'

    map_id = extract_data_start(packet)
    print(f'Map ID: {map_id}')
