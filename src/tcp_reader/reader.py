import asyncio
from pathlib import Path
from pprint import pprint
from typing import Type
from uuid import uuid4

from Cryptodome.Util.py3compat import BytesIO

from protobufer import proto_test_pb2
import io

from src.events.bank_open_event import BankOpenEvent
from src.events.base import BaseEvent
from src.events.figth_ended import FightEndedEvent
from src.events.figth_started import FightStartedEvent
from src.events.harvest_completed import HarvestCompletedEvent
from src.events.is_heavy import OverSizedEvent
from src.events.map_change import MapChangeEvent
from src.events.monster_location import MonsterLocationEvent
from src.events.turn_start_event import TurnStartEvent
from src.events.zaap_opened import ZaapOpenedEvent
from src.model.exceptions import LostData
from src.model.state import State

map_events = {}


def retry(fn, count: int = 0, stop: int = 3):
    try:
        return fn()
    except Exception as e:
        if count < stop:
            return retry(fn, count + 1, stop)
        else:
            raise e


class TCPReader:
    _map = {}

    def __init__(self):
        map_events.update(
            {
                MapChangeEvent: self.map_change_event,
                ZaapOpenedEvent: self.zaap_open,
                HarvestCompletedEvent: self.harvest_completed,
                FightStartedEvent: self.fight_started,
                FightEndedEvent: self.fight_ended,
                TurnStartEvent: self.turn_starts,
                MonsterLocationEvent: self.monster_location,
                OverSizedEvent: self.over_sized,
                BankOpenEvent: self.bank_open,
            }
        )

    def process(self, payload: bytes, event: Type[BaseEvent]):
        _stream = io.BytesIO(payload)
        try:
            _event = retry(lambda: map_events[event](stream=_stream))
            State().on_event(_event)
        except LostData as error:
            raise error
        except Exception:
            _p = Path(f"./src/tcp_reader/tcp_chunks/{uuid4()}")
            print(_p)
            with open(_p.resolve(), "wb") as file:
                file.write(payload)

    @staticmethod
    def map_change_event(stream: io.BytesIO):
        stream.seek(0)
        _content = stream.read()
        stream.seek(0)
        _read_size = None
        if b"type.ankama.com/iaf" in _content:
            _read_size = len(_content.split(b"type.ankama.com/iaf")[0]) - 32
        if b"type.ankama.com/jta" in _content:
            _read_size = len(_content.split(b"type.ankama.com/jta")[0]) - 32
        try:
            stream.seek(32)
            map_event = proto_test_pb2.MapComplementaryInformationEvent()
            map_event.ParseFromString(stream.read(_read_size))
            return MapChangeEvent.from_proto(map_event)
        except Exception as error:
            raise LostData()

    @staticmethod
    def zaap_open(stream: io.BytesIO):
        stream.seek(0)
        stream.seek(32)
        map_event = proto_test_pb2.TeleportDestinationsEvent()
        map_event.ParseFromString(stream.read())
        return ZaapOpenedEvent.from_proto(map_event)

    @staticmethod
    def harvest_completed(stream: io.BytesIO):
        stream.seek(0)
        stream.seek(27)
        map_event = proto_test_pb2.InteractiveUseEndedEvent()
        map_event.ParseFromString(stream.read())
        return HarvestCompletedEvent.from_proto(map_event)

    @staticmethod
    def fight_started(stream: io.BytesIO):
        return FightStartedEvent(True)

    @staticmethod
    def fight_ended(stream: io.BytesIO):
        return FightEndedEvent(True)

    @staticmethod
    def turn_starts(stream: io.BytesIO):
        stream.seek(113)
        map_event = proto_test_pb2.FightNewRoundEvent()
        map_event.ParseFromString(stream.read())
        return TurnStartEvent.from_proto(map_event)

    @staticmethod
    def monster_location(stream: io.BytesIO):
        stream.seek(0)
        _bytes = stream.read().split(b"\x1a")
        # ;*
        _chunk_data = list(
            filter(lambda x: MonsterLocationEvent.get_signature() in x, _bytes)
        )
        map_event = proto_test_pb2.MapMovementEvent()
        _pos = []
        for i in _chunk_data:
            stream = io.BytesIO(b"\x1a" + i)
            try:
                stream.seek(0)
                _size = len(stream.read())
                stream.seek(0)
                _stream = BytesIO(stream.read(_size - 1))
                _stream.seek(27)
                map_event.ParseFromString(_stream.read())
                _pos.append(MonsterLocationEvent.from_proto(map_event))
                continue
            except:
                pass

            try:
                stream.seek(27)
                map_event.ParseFromString(stream.read())
                _pos.append(MonsterLocationEvent.from_proto(map_event))
                continue
            except:
                pass

            try:
                stream.seek(27)
                map_event.ParseFromString(stream.read())
                _pos.append(MonsterLocationEvent.from_proto(map_event))
                continue
            except:
                pass

        return _pos[-1] if _pos else MonsterLocationEvent(0)

    @staticmethod
    def over_sized(stream: io.BytesIO):
        stream.seek(93)
        map_event = proto_test_pb2.InventoryWeightEvent()
        map_event.ParseFromString(stream.read())
        return OverSizedEvent.from_proto(map_event)

    @staticmethod
    def bank_open(stream: io.BytesIO):
        return BankOpenEvent(True)


if __name__ == "__main__":
    _data1 = b'\xfc\x05\x1a\xf9\x05\n\xf6\x05\n\x13type.ankama.com/igr\x12\xde\x05\x08_\x10\x82\x98\x80Z"k\x08\xa7\x82\x94\xdd\xb8\x06\x12\x05\x10\xe7\x02\x18\x04\x1a[\n.\x08\x01\x12\x0c\xd5\x19\xf0)\xfe)\xfa\x0c\xbf\x01\x81\x0c\x1a\x18\xc6\xbf\xeb\x0f\xe7\xef\xdb\x15\xd7\x9d\x83\x18\xfa\xff\xb3&\xff\xff\xff/\xeb\xf1\x876"\x02\xa0\x01\x12)"\'\n\x05Unkai\x12\x1e\n\x01\x0b\x1a\x02X\x01 \xe5\xde\xf6V*\x10\x08\x02 \xc2\x82\x94\xdd\xb8\x06(\xc2\x82\x94\xdd\xb8\x06"m\x08\xa7\x82\xd0\xfe\xb6\x06\x12\x04\x10\x13\x18\x02\x1a^\n+\x08\x01\x12\tZ\xdc\x10\xe2\t\xcd\x03\xce\x03\x1a\x18\xc4\x98\xbe\x0c\xff\xff\xff\x17\xdb\xb6\xed\x1a\xa3\xbc\xe0\'\xf7\xef\xa7+\x8f\xaa\xea7"\x02\xa0\x01\x12/"-\n\x0bSai-Ratanas\x12\x1e\n\x01\x0b\x1a\x02X\x01 \x84\x84\x80N*\x10\x08\x02 \xd7\x82\xd0\xfe\xb6\x06(\xd7\x82\xd0\xfe\xb6\x06"n\x08\xa7\x82\xb0\xf6\xb8\x06\x12\x05\x10\x81\x03\x18\x02\x1a^\n.\x08\x01\x12\x0c\xff\x0c\xc0\x11\xfe)\x99\x02\xab\x01\x8b)\x1a\x18\xed\xb6\x86\x0f\xba\x9b\x97\x17\xa1\xd0\x98\x19\xd7\xaf\xdf&\xe0\xc1\x83/\xf7\xc5\xf90"\x02\xa0\x01\x12,"*\n\x08Tecnopas\x12\x1e\n\x01\x0b\x1a\x02X\x01 \xcd\xca\x91\x14*\x10\x08\x02 \xcc\x82\xb0\xf6\xb8\x06(\xcc\x82\xb0\xf6\xb8\x06"$\x08\xe0\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xe7\x01\x18\x01\x1a\x10\n\x05\x08R"\x01P\x12\x07:\x05\x08\xf4"\x10\x01"&\x08\xde\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xf7\x02\x18\x03\x1a\x12\n\x03\x08\xc3\x01\x12\x0b:\t\x08\xf3""\x04\x12\x02\xc8\x0f"C\x08\xdc\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xd4\x02\x18\x05\x1a/\n\x03\x08\xfe\x04\x12(2&\n\x17\n\x07\x08\xec\x01\x10\x02\x18\x0c\x12\x0c\x08\xea\x03\x10\x02\x18\x0c"\x03\x08\xfb\x04\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x18\x01"_\x08\xdb\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xad\x01\x18\x01\x1aK\n\x03\x08\xfd\x04\x12D2B\n3\n\x07\x08\xed\x03\x10\x01\x18\x0b\x12\x0c\x08\xec\x01\x10\x05\x18\x0f"\x03\x08\xfe\x04\x12\x0c\x08\xec\x01\x10\x05\x18\x0f"\x03\x08\xfe\x04\x12\x0c\x08\xeb\x03\x10\x02\x18\x0c"\x03\x08\xae\x03\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x18\x01*\x11\x08\xd7\xb4\x1f\x10""\x05\x08(\x10\xbeK(\x010\x03*\x12\x08\x87\xb7\x1f\x10\xfe\x01\x1a\x05\x08D\x10\xbfK(\x010\x02*\x11\x08\x97\xc0\x1f\x10\xbc\x02\x1a\x06\x08\xe8\x02\x10\xbdK(\x01*\x11\x08\xd6\xb4\x1f\x10\x01\x1a\x05\x08\x06\x10\xbcK(\x010\x03*\x12\x08\x86\xb7\x1f\x10\xfe\x01\x1a\x05\x08D\x10\xbbK(\x010\x02*\x07\x08\x9f\xc0\x1f\x10\xbc\x022\t\x08\xd7\xb4\x1f\x10\x94\x03 \x012\t\x08\x87\xb7\x1f\x10\xef\x03 \x012\x08\x08\x86\xb7\x1f\x10> \x012\t\x08\xd6\xb4\x1f\x10\xd3\x01 \x01H\x01\x19\x1a\x17\n\x15\n\x13type.ankama.com/jta'
    _data2 = b'\xc0\x08\x1a\xbd\x08\n\xba\x08\n\x13type.ankama.com/igr\x12\xa2\x08\x08_\x10\x82\x98\x90[\x1a]\x08\xce\x94\x1c\x10\x8f\x03"T\n\x03\xa4\xb6\x1f\x12\x16\x08\x01\x18\x01"\x0e\n\x06b4huka\x12\x043133(\x01\x125\x08\x02\x18\x01"\x0b\n\x03Rbn\x12\x043427(\x01J \x08\xbc\t\x12\x06Exodia\x18\xc8\x01"\x10\n\x0e\x08=\x10\xb4\xe8\xd4\x01\x18\x01 \xee\xd8\xbd\x03"n\x08\xa7\x82\xd0\xfe\xb6\x06\x12\x05\x10\xc1\x02\x18\x04\x1a^\n+\x08\x01\x12\tZ\xdc\x10\xe2\t\xcd\x03\xce\x03\x1a\x18\xc4\x98\xbe\x0c\xff\xff\xff\x17\xdb\xb6\xed\x1a\xa3\xbc\xe0\'\xf7\xef\xa7+\x8f\xaa\xea7"\x02\xa0\x01\x12/"-\n\x0bSai-Ratanas\x12\x1e\n\x01\x0b\x1a\x02X\x01 \x84\x84\x80N*\x10\x08\x02 \xd7\x82\xd0\xfe\xb6\x06(\xd7\x82\xd0\xfe\xb6\x06"m\x08\xa7\x82\xec\xa5\xb9\x06\x12\x05\x10\xb4\x03\x18\x01\x1a]\n-\x08\x01\x12\x0bo\x85\x11\xfe)\xf2\x01\xbf\x01\x8b)\x1a\x18\xbe\x8b\xd3\x0e\xf9\xf1\xe7\x17\xee\xb6\xad\x1d\xd8\xef\x9a$\xfe\xcc\x82+\xc3\xa2\xdd0"\x02\xa0\x01\x12,"*\n\x06Iowool\x12 \n\x01\x0b\x10\x01\x1a\x02X\x01 \x84\xce\xfeV*\x10\x08\x02 \xbe\x82\xec\xa5\xb9\x06(\xbe\x82\xec\xa5\xb9\x06"l\x08\xa7\x82\x80\x8f\xb9\x06\x12\x05\x10\xe2\x02\x18\x01\x1a\\\n-\x08\x01\x12\x0b\xfd\n\x9c\x11\xd6\x03\xf0\x01z\xcc\x1e\x1a\x18\xe9\xb6\x96\x0f\xec\xd2\xf8\x10\x90\x96\xf4\x1d\x80\xa6\xf4 \xde\x8a\x98(\xc6\xe4\xf71"\x02\xaf\x01\x12+")\n\x07Lijesin\x12\x1e\n\x01\x0b\x1a\x02X\x01 \x85\xe4\x95\n*\x10\x08\x02 \xcd\x82\x80\x8f\xb9\x06(\xcd\x82\x80\x8f\xb9\x06"k\x08\xa7\x82\xd4\xbd\xe2\x05\x12\x05\x10\xf6\x02\x18\x06\x1a[\n-\x08\x01\x12\x0b\xeb\x18\xef\x18\xce\x04\xee\x01w\xce\x03\x1a\x18\x8d\xcf\xe2\x0e\xba\x9a\xa9\x14\xf4\xe9\xff\x1f\xb2\xa4\xee%\x82\x84\x9c/\x84\x88\xd85"\x02\xa0\x01\x12*"(\n\x06Velyos\x12\x1e\n\x01\x0b\x1a\x02X\x01 \xd2\x8d\x96U*\x10\x08\x02 \xd7\x82\xd4\xbd\xe2\x05(\xd7\x82\xd4\xbd\xe2\x05"\x94\x01\x08\xa7\x82\xcc\xf8\xef\x05\x12\x05\x10\xe4\x03\x18\x01\x1a\x83\x01\nF\x08\x9f\'\x1a\x0c\xe8\xe3\xaa\x0f\xd6\xe1\xe9\x1e\xd6\xe1\xe9\x16"\x01U*0\x08\x02\x1a,\x08\x02\x12\n\n\xfc(\xfb\x06\xf4\x1f\xf5\x1fR\x1a\x18\xb7\xce\xd1\x0c\xaa\xfe\xdc\x13\xaf\xe8\xe1\x1e\xd3\xc6\xa5"\x96\xd4\xc4*\xc4\xa4\xed2"\x02\xa0\x01\x129"7\n\x0cOshea-shield\x12\'\n\x01\x0b\x1a\x07B\x05\x08c\x10\x84\x01\x1a\x02X\x01 \xc8\xd1\xb15*\x10\x08\x02 \xab\x83\xcc\xf8\xef\x05(\xab\x83\xcc\xf8\xef\x05" \x08\xde\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xba\x02\x18\x01\x1a\x0c\n\x03\x08\xfc&\x12\x05:\x03\x08\xdf!" \x08\xdf\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xa7\x03\x18\x01\x1a\x0c\n\x03\x08\xf8&\x12\x05:\x03\x08\xc9"")\x08\xe0\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xeb\x01\x18\x03\x1a\x15\n\x06\x08\x88\x15"\x01F\x12\x0b:\t\x08\xb2\x12"\x04\x12\x02\xca\x0b"m\x08\xd8\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xec\x03\x18\x05\x1aY\n\x03\x08\xfe\x04\x12R2P\nA\n\x07\x08\xec\x01\x10\x01\x18\x0b\x12\x0c\x08\xec\x03\x10\x01\x18\x0b"\x03\x08\xfc\x04\x12\x0c\x08\xe9\x03\x10\x02\x18\x0c"\x03\x08\xfa\x04\x12\x0c\x08\xe9\x03\x10\x05\x18\x0f"\x03\x08\xfa\x04\x12\x0c\x08\xeb\x03\x10\x04\x18\x0e"\x03\x08\xae\x03\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x18\x01"5\x08\xda\xe3\xfe\xff\xff\xff\xff\xff\xff\x01\x12\x05\x10\xd3\x03\x18\x05\x1a!\n\x03\x08\xfe\x04\x12\x1a2\x18\n\t\n\x07\x08\xec\x01\x10\x04\x18\x0e\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x18\x01*\x11\x08\xa4\xb6\x1f\x10\xac\x02\x1a\x06\x08T\x10\xb7\xe4\x02(\x01*\x11\x08\xc0\xaf\x1f\x10""\x05\x08(\x10\x94N(\x010\x01*!\x08\xed\xb6\x1f\x10\xbc\x02\x1a\x06\x08\xe9\x02\x10\x93N\x1a\x06\x08\xd3\x02\x10\x92N\x1a\x06\x08\xb8\x01\x10\x91N(\x012\t\x08\xc0\xaf\x1f\x10\xa0\x03 \x01H\x01<\x1a:\n8\n\x13type.ankama.com/iaf\x12!\x08\xce\x94\x1c\x12\x03\xa4\xb6\x1f\x1a\x16\x08\x01\x18\x01"\x0e\n\x06b4huka\x12\x043133(\x01[\x1aY\nW\n\x13type.ankama.com/iaf\x12@\x08\xce\x94\x1c\x12\x03\xa4\xb6\x1f\x1a5\x08\x02\x18\x01"\x0b\n\x03Rbn\x12\x043427(\x01J \x08\xbc\t\x12\x06Exodia\x18\xc8\x01"\x10\n\x0e\x08=\x10\xb4\xe8\xd4\x01\x18\x01 \xee\xd8\xbd\x03\x19\x1a\x17\n\x15\n\x13type.ankama.com/jta'
    _a = BytesIO(_data1)

    _a = BytesIO(_a.read(len(_data1)-26))

    print(_a.read())
    _a.seek(0)

    # for i in range(20):
    #     _a.seek(0)
    #     _a.seek(65 + i)
    #     print(_data1)
    #     print(_a.read())
    #     _a.seek(65+ i)
    # map_event = proto_test_pb2.MapMovementEvent()
    # map_event.ParseFromString(_a.read())
    # a = MonsterLocationEvent.from_proto(map_event)
    #
    # with open(r"C:\Users\imxim\Documents\dofus_uniy\src\tcp_reader\tcp_chunks\75", "rb") as file:
    #     _a = BytesIO(file.read())
    # print(_a.read())
    a = TCPReader.map_change_event(_a)
    print(a)
